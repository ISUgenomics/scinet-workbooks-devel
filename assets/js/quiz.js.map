{"version":3,"sources":["node_modules/browser-pack/_prelude.js","_scripts/js/copycode.js","_scripts/js/quiz.js","_scripts/quiz.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","COPY_CODE_CLASS","FETCHED_DIV","COPY_BUTTON_CLASS","COPY_BUTTON_SUCCESS_CLASS","COPY_WRAPPER_CLASS","SR_STATUS_MESSAGE_CLASS","COPY_CODE_STRING","COPY_CODE","document","querySelectorAll","COPY_WRAPPER","SR_STATUS_MESSAGE","SR_DEFAULT_MESSAGE","SR_SUCCESS_MESSAGE","SR_SUCCESS_MESSAGE_ALT","createWrapper","wrapper","createElement","classList","add","createCopyButton","btn","btnTxt","setAttribute","textContent","append","className","createSRStatus","srText","copyOnClick","copyBtn","event","currentTarget","btnWrapper","closest","labelVisual","querySelector","labelSR","setTimeout","remove","codeElement","navigator","clipboard","writeText","copycode","forEach","copyWrapper","copyButton","labelSROnly","copyCodeElement","appendChild","addEventListener","codeProcess","copydiv","questions","quizSuccess","formid","idval","myResponses","displayDiv","$","mySolutions","find","q","String","qid","myAnswer","answer","mySolution","solution","myCorrections","responses","userResponse","getAll","responseArr","Array","isArray","map","undefined","solutionArr","correctionArr","let","resultMsg","solutionMsg","alertClass","sortedResp","sort","sortedSol","isMatch","every","v","htmlSolution","parseHTML","solPrint","data","alertHtml","class","text","html","copyingcode","solutionhtml","wrap","each","this","baseURL","path","window","location","origin","pathname","ajax","type","url","get_param","dataType","success","entry","ref","questionsarray","error","console","log","quiz","preventDefault","submitQuiz","key","form","fdata","FormData","getAttribute","uniqueKeys","Set","keys","has","question","dataqid","quizload","initQuiz","readyState","once"],"mappings":"AAAA,CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,GAAA,CAAAJ,EAAAG,GAAA,CAAA,GAAA,CAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,YAAA,OAAAC,SAAAA,QAAA,GAAA,CAAAF,GAAAC,EAAA,OAAAA,EAAAF,EAAA,CAAA,CAAA,EAAA,GAAAI,EAAA,OAAAA,EAAAJ,EAAA,CAAA,CAAA,EAAA,MAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,GAAA,GAAAO,KAAA,mBAAAF,CAAA,CAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,EAAA,EAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,CAAA,CAAA,EAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,CAAA,CAAA,CAAA,OAAAD,EAAAG,GAAAS,OAAA,CAAA,IAAA,IAAAL,EAAA,YAAA,OAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,CAAA,GAAAD,EAAAD,EAAAE,EAAA,EAAA,OAAAD,CAAA,EAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,GCAA,IAAAK,EAAA,YAEA,IAAAC,EAAA,oBACAC,oCAAAF,yBACAG,EAAAH,EAAA,oBACAI,EAAAJ,EAAA,YACAK,EAAAL,EAAA,cAEAM,SAAAL,kBACA,IAAAM,EAAAC,SAAAC,iBAAAH,CAAA,EACAI,EAAA,IAAAN,EACAO,EAAA,IAAAN,EAEAO,EAAA,uBACAC,EAAA,2BACAC,EAAAD,EAAA,IAOAE,EAAA,KACA,IAAAC,EAAAR,SAAAS,cAAA,KAAA,EAGA,OAFAD,EAAAE,UAAAC,IAAAf,CAAA,EAEAY,CACA,EAOAI,EAAA,KACA,IAAAC,EAAAb,SAAAS,cAAA,QAAA,EACAK,EAAAd,SAAAS,cAAA,MAAA,EAUA,OARAK,EAAAC,aAAA,cAAA,MAAA,EACAD,EAAAE,YAAA,OACAH,EAAAI,OAAAH,CAAA,EAEAD,EAAAK,UAAAxB,EACAmB,EAAAE,aAAA,OAAA,QAAA,EACAF,EAAAE,aAAA,aAAAX,CAAA,EAEAS,CACA,EAOAM,EAAA,KACA,IAAAC,EAAApB,SAAAS,cAAA,KAAA,EAIA,OAHAW,EAAAV,UAAAC,IAAA,cAAAd,CAAA,EACAuB,EAAAL,aAAA,YAAA,QAAA,EAEAK,CACA,EAQAC,EAAA,IACA,IAAAC,EAAAC,EAAAC,cACAC,EAAAH,EAAAI,QAAAxB,CAAA,EACA,IAAAyB,EAAAL,EAAAM,cAAA,eAAA,EACAC,EAAAJ,EAAAG,cAAAzB,CAAA,EAIAmB,EAAAZ,UAAAC,IAAAhB,CAAA,EACAgC,EAAAX,YAAA,UAIAa,EAAAb,aAAAX,EACAwB,EAAAb,YAAAV,EAEAuB,EAAAb,YAAAX,EAIAyB,WAAA,KACAR,EAAAZ,UAAAqB,OAAApC,CAAA,EACAgC,EAAAX,YAAA,MACA,EAAA,GAAA,EAIAgB,EADAV,EAAAI,QAAA,IAAAjC,CAAA,EACAmC,cAAA,MAAA,EACA,OAAAK,UAAAC,UAAAC,UAAAH,EAAAhB,WAAA,CACA,EAoCAzB,EAAAJ,QAAA,CAAAiD,SA3BA,WACArC,EAAAsC,QAAA,IACA,IAAAC,EAAA/B,EAAA,EACAgC,EAAA3B,EAAA,EACA4B,EAAArB,EAAA,EAEAsB,EAAA/B,UAAAC,IAAA,WAAA,EACA2B,EAAArB,OAAAuB,EAAAD,CAAA,EACAE,EAAAC,YAAAJ,CAAA,EAEAC,EAAAI,iBAAA,QAAAtB,CAAA,CACA,CAAA,CACA,EAeAuB,YAbA,SAAAC,GAEA,IAAAP,EAAA/B,EAAA,EACAgC,EAAA3B,EAAA,EACA4B,EAAArB,EAAA,EAEA0B,EAAAnC,UAAAC,IAAA,WAAA,EACA2B,EAAArB,OAAAuB,EAAAD,CAAA,EACAM,EAAAH,YAAAJ,CAAA,EAEAC,EAAAI,iBAAA,QAAAtB,CAAA,CACA,CAEA,C,yBCrIA,IAAAuB,EAAA/D,EAAA,YAAA,EAAA,YAEA,IAAAiE,EAAA,GAoDA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IACAC,EAAAC,EAAA,KADAJ,EAAA,UACA,EAGAK,EAAAP,EAAAA,EAAAQ,KAAAC,GAAAC,OAAAD,EAAAE,GAAA,IAAAD,OAAAP,CAAA,CAAA,EAAA,KACAS,EAAAL,EAAAA,EAAAM,OAAA,KACAC,EAAAP,EAAAA,EAAAQ,SAAA,KACAC,EAAAT,EAAAA,EAAAU,UAAA,KAGAC,EAAAd,EAAAe,OAAAhB,CAAA,EAIAiB,EAAAC,MAAAC,QAAAJ,CAAA,EAAAA,EAAAK,IAAAb,MAAA,EAAAc,KAAAA,IAAAN,EAAA,CAAAR,OAAAQ,CAAA,GAAA,GACAO,EAAAJ,MAAAC,QAAAV,CAAA,EAAAA,EAAAW,IAAAb,MAAA,EAAAc,KAAAA,IAAAZ,EAAA,CAAAF,OAAAE,CAAA,GAAA,GACAc,EAAAL,MAAAC,QAAAN,CAAA,EAAAA,EAAAO,IAAAb,MAAA,EAAAc,KAAAA,IAAAR,EAAA,CAAAN,OAAAM,CAAA,GAAA,GACAW,IAAAC,EAAA,GACAC,EAAA,GACAC,EAAA,GAEA,GAAAlB,MAAAA,EAEAgB,EAAA,UACAC,EAAAf,GAAA,uBACAgB,EAAA,iCACA,GAAA,EAAAV,EAAA7E,QAAA,IAAAkF,EAAAlF,OAEAqF,EAAA,QACAC,EAAA,gCACAC,EAAA,kCACA,GAAA,EAAAV,EAAA7E,QAAA,EAAAkF,EAAAlF,OAAA,CAEAwF,EAAA,CAAA,GAAAX,GAAAY,KAAA,EACA,IAAAC,EAAA,CAAA,GAAAR,GAAAO,KAAA,EACAE,EAAAH,EAAAxF,SAAA0F,EAAA1F,QAAAwF,EAAAI,MAAA,CAAAC,EAAAxG,IAAAwG,IAAAH,EAAArG,EAAA,EAIAkG,EAHAI,GACAN,EAAA,WACAC,EAAAf,GAAA,GACA,iCAEAc,EAAA,YACAC,EAAA,0BACA,6BAEA,MAKAC,EALA,IAAAV,EAAA7E,QAAA,IAAAkF,EAAAlF,OAEAmE,OAAAU,EAAA,EAAA,IAAAV,OAAAe,EAAA,EAAA,GACAG,EAAA,WACAC,EAAAb,EAAAU,EAAAR,EAAA,GAAAJ,GAAA,GACA,iCAEAc,EAAA,YACAC,EAAAb,EAAAU,EAAAR,EAAA,GAAA,0BACA,+BAGAU,EAAA,YACAC,EAAA,0BACA,8BAGAQ,EAAAR,EAAAvB,EAAAgC,UAAAT,CAAA,EAAA,KACAU,EAAAV,EAAAQ,EAAA,GAAAG,KAAA,IAGAC,EAAAnC,EAAA,SAAA,CACAoC,MAAAZ,EAAA,oBACA,CAAA,EAAA3D,OAAAmC,EAAA,SAAA,CACAoC,MAAA,iBACA,CAAA,EAAAvE,OAAAmC,EAAA,QAAA,CACAoC,MAAA,qBACAC,KAAAf,CACA,CAAA,CAAA,EAAAzD,OAAAmC,EAAA,SAAA,CACAoC,MAAA,iBACA,CAAA,EAAAE,KAAAL,CAAA,CAAA,CAAA,EA1FAM,GADAC,EA6FAL,GA5FAjC,KAAA,WAAA,EACAsC,EAAAtC,KAAA,cAAA,EAAAuC,KAAA,oHAAA,EAEA,EAAAF,EAAAtG,SACAsG,EAAAE,KAAA,8HAAA,EAEAD,EAAAtC,KAAA,eAAA,EAAAwC,KAAA,WACAlD,EAAAmD,IAAA,CACA,CAAA,GAsFA5C,EAAAuC,KAAAH,CAAA,CAEA,CAiDAhG,EAAAJ,QA1BA,WApBA,IACA6G,EACAC,EADAD,EAAAE,OAAAC,SAAAC,OACAH,EAAAC,OAAAC,SAAAE,SACAjD,EAAAkD,KAAA,CACAC,KAAA,MACAC,IAAAR,EAAA,4BACAV,KAAA,CAAAmB,UAAA,OAAA,EACAC,SAAA,OACAC,QAAA,SAAArB,GAEAsB,EAAAtB,EAAAhC,KAAAC,GAAAA,EAAAsD,MAAAZ,CAAA,EACAa,EAAAF,EAAAA,EAAA9D,UAAA,KACAA,EAAAgE,CACA,EACAC,MAAA,WACAC,QAAAC,IAAA,gCAAA,CACA,CACA,CAAA,EAOA7D,EAAA,cAAA,EAAAyC,KAAA,oHAAA,EACAzC,EAAA,WAAA,EAAAyC,KAAA,mIAAA,EAKA7F,SAAAC,iBAAA,UAAA,EAAAoC,QAAA6E,IAEAA,EAAAvE,iBAAA,SAAA,SAAArE,GACAA,EAAA6I,eAAA,EACAC,IA9JAC,EAVAC,EAwKAvB,KAtKAwB,EAAA,IAAAC,SAAAF,CAAA,EAEAtE,EAAAsE,EAAAG,aAAA,IAAA,EAEAC,EAAA,IAAAC,IAIA,IAAAN,KAAAE,EAAAK,KAAA,EACAF,EAAAG,IAAAR,CAAA,IAEAtE,EADAC,EAAA,IAAAqE,EACAA,EAAAE,CAAA,EACAG,EAAA/G,IAAA0G,CAAA,EA2JA,CAAA,CACA,CAAA,EACArH,SAAAC,iBAAA,cAAA,EAAAoC,QAAAyF,IAEAA,EAAAnF,iBAAA,SAAA,SAAArE,GAtJA,IAEAiJ,EACAQ,EAoJAzJ,EAAA6I,eAAA,EAvJAG,EAwJAvB,KAtJAwB,EAAA,IAAAC,SAAAF,CAAA,EACAS,EAAAT,EAAAG,aAAA,UAAA,EAGA1E,EAFAuE,EAAAG,aAAA,IAAA,EAEAM,EAAAR,CAAA,CAmJA,CAAA,CACA,CAAA,CACA,C,uCCvLA,IAAAS,EAAAnJ,EAAA,WAAA,EAEAoJ,EAAA,KACAD,EAAA,CACA,EAEA,YAAAhI,SAAAkI,WACAlI,SAAA2C,iBAAA,mBAAAsF,EAAA,CAAAE,KAAA,CAAA,CAAA,CAAA,EAEAF,EAAA","file":"quiz.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","const COPY_CODE_CLASS = \"copy-code\";\n//const class_FETCH = `.${COPY_CODE_CLASS}`;\nconst FETCHED_DIV = \"highlighter-rouge\";\nconst COPY_BUTTON_CLASS = `usa-button usa-button--outline ${COPY_CODE_CLASS}__button right-button`;\nconst COPY_BUTTON_SUCCESS_CLASS = `${COPY_CODE_CLASS}__button--success`;\nconst COPY_WRAPPER_CLASS = `${COPY_CODE_CLASS}__wrapper`;\nconst SR_STATUS_MESSAGE_CLASS = `${COPY_CODE_CLASS}__sr-status`;\n\nconst COPY_CODE_STRING = `div.${FETCHED_DIV}:not(.no-copy)`;\nconst COPY_CODE = document.querySelectorAll(`${COPY_CODE_STRING}`);\nconst COPY_WRAPPER = `.${COPY_WRAPPER_CLASS}`;\nconst SR_STATUS_MESSAGE = `.${SR_STATUS_MESSAGE_CLASS}`;\n\nconst SR_DEFAULT_MESSAGE = \"Copy component code.\";\nconst SR_SUCCESS_MESSAGE = \"Code copied to clipboard\";\nconst SR_SUCCESS_MESSAGE_ALT = `${SR_SUCCESS_MESSAGE}.`;\n\n/**\n * Creates a wrapper for copy button.\n *\n * @return {HTMLDivElement} - A div for `copy-code__wrapper`.\n */\nconst createWrapper = () => {\n  const wrapper = document.createElement(\"div\");\n  wrapper.classList.add(COPY_WRAPPER_CLASS);\n\n  return wrapper;\n};\n\n/**\n * Creates a copy button component.\n *\n * @return {HTMLButtonElement} - A button for copying code `copy-code__button`.\n */\nconst createCopyButton = () => {\n  const btn = document.createElement(\"button\");\n  const btnTxt = document.createElement(\"span\");\n\n  btnTxt.setAttribute(\"aria-hidden\", \"true\");\n  btnTxt.textContent = \"Copy\";\n  btn.append(btnTxt);\n\n  btn.className = COPY_BUTTON_CLASS;\n  btn.setAttribute(\"type\", \"button\");\n  btn.setAttribute(\"aria-label\", SR_DEFAULT_MESSAGE);\n\n  return btn;\n};\n\n/**\n * Creates a screen reader only div element for success text \n * \n * @return {HTMLDivElement} - A div for screen reader text\n */\nconst createSRStatus = () => {\n  const srText = document.createElement(\"div\");\n  srText.classList.add(\"usa-sr-only\", SR_STATUS_MESSAGE_CLASS);\n  srText.setAttribute(\"aria-live\", \"polite\");\n\n  return srText;\n};\n\n/**\n * Copy <code> text content when copy code button is clicked.\n *\n * @param {Event} event - The click event from copy code button.\n * @return {Clipboard} - Code element contents written to clipboard.\n */\nconst copyOnClick = (event) => {\n  const copyBtn = event.currentTarget;\n  const btnWrapper = copyBtn.closest(COPY_WRAPPER);\n  const labelVisual = copyBtn.querySelector(\"[aria-hidden]\");\n  const labelSR = btnWrapper.querySelector(SR_STATUS_MESSAGE);\n\n\n  // Set success state\n  copyBtn.classList.add(COPY_BUTTON_SUCCESS_CLASS);\n  labelVisual.textContent = \"Copied!\";\n\n  // In order for consistent SR readouts, the text string must change\n  // Without changing, the SR will not consitently read the text on click\n  if (labelSR.textContent == SR_SUCCESS_MESSAGE) {\n    labelSR.textContent = SR_SUCCESS_MESSAGE_ALT;\n  } else {\n    labelSR.textContent = SR_SUCCESS_MESSAGE;\n  }\n\n  // After timeout, reset to default state\n  setTimeout(() => {\n    copyBtn.classList.remove(COPY_BUTTON_SUCCESS_CLASS);\n    labelVisual.textContent = \"Copy\";\n  }, 3000);\n\n  // Select section code and copy to clipboard\n  const copyComponent = copyBtn.closest(`.${FETCHED_DIV}`);\n  const codeElement = copyComponent.querySelector(\"code\");\n  return navigator.clipboard.writeText(codeElement.textContent);\n};\n\n/**\n * Initialize code component.\n *\n * Iterate through all code components and attach dynamically generated\n * button & wrapper to DOM. Copy code element contents when button is clicked.\n *\n */\nfunction copycode(){\n  COPY_CODE.forEach((copyCodeElement) => {\n    const copyWrapper = createWrapper();\n    const copyButton = createCopyButton();\n    const labelSROnly = createSRStatus();\n\n    copyCodeElement.classList.add(\"copy-code\");\n    copyWrapper.append(labelSROnly, copyButton);\n    copyCodeElement.appendChild(copyWrapper);\n\n    copyButton.addEventListener(\"click\", copyOnClick);\n  });\n}\n\nfunction codeProcess(copydiv){\n\n    const copyWrapper = createWrapper();\n    const copyButton = createCopyButton();\n    const labelSROnly = createSRStatus();\n\n    copydiv.classList.add(\"copy-code\");\n    copyWrapper.append(labelSROnly, copyButton);\n    copydiv.appendChild(copyWrapper);\n\n    copyButton.addEventListener(\"click\", copyOnClick);\n}\n\nmodule.exports = { copycode, codeProcess }; ","const { codeProcess } = require(\"./copycode\");\n\nvar questions = [];\n\n// handler for quizzes\nfunction submitQuiz(form){\n  // get form data\n  var fdata = new FormData(form);\n\n  var formid = form.getAttribute(\"id\");\n\n  var uniqueKeys = new Set();\n\n  // get only unique keys\n  // avoid duplicate submissions on multiple choice questions\n  for (const key of fdata.keys()) {\n    if (!(uniqueKeys.has(key))) {\n      let thisquestionid = formid + \"-\" + key;\n      quizSuccess(thisquestionid, key, fdata);\n      uniqueKeys.add(key);\n    }\n  }\n\n  //return false;\n  \n}\n\n// handler for single question forms\nfunction submitQuestion(form){\n  // get form data\n  var fdata = new FormData(form);\n  var dataqid = form.getAttribute(\"data-qid\");\n  var formid = form.getAttribute(\"id\");\n\n  quizSuccess(formid, dataqid, fdata); \n  //return false;\n  \n}\n\nfunction processCodeBlocks (solutionhtml){\n  let copyingcode = solutionhtml.find( \"code.copy\" );\n  solutionhtml.find( \"code.no-copy\" ).wrap(\"<div class='language-plaintext highlighter-rouge'><div class='highlight'><pre class='highlight'></pre></div></div>\");\n  \n  if (copyingcode.length > 0) {\n    copyingcode.wrap(\"<div class='language-plaintext copy-code highlighter-rouge'><div class='highlight'><pre class='highlight'></pre></div></div>\");\n    // add the copycode section here.\n    solutionhtml.find( \"div.copy-code\" ).each(function(){\n      codeProcess(this);\n    });\n  }\n}\n\n// Get answers and responses from json\n\nfunction quizSuccess(formid, idval, myResponses) {\n  var displayDivId = formid + \"-result\";\n  var displayDiv = $('#' + displayDivId);\n\n  // Find the question by qid (ensure idval is number if needed)\n  var mySolutions = questions ? questions.find(q => String(q.qid) === String(idval)) : null;\n  var myAnswer = mySolutions ? mySolutions.answer : null;\n  var mySolution =  mySolutions ? mySolutions.solution : null;\n  var myCorrections = mySolutions ? mySolutions.responses : null;\n  \n  // Get the user's response(s) as array or value\n  var userResponse = myResponses.getAll(idval);\n  \n  // If multiple checkboxes, FormData returns array, else string\n  // Normalize for comparison\n  let responseArr = Array.isArray(userResponse) ? userResponse.map(String) : (userResponse !== undefined ? [ String(userResponse) ] : [ ]);\n  let solutionArr = Array.isArray(myAnswer) ? myAnswer.map(String) : (myAnswer !== undefined ? [ String(myAnswer) ] : [ ]);\n  let correctionArr = Array.isArray(myCorrections) ? myCorrections.map(String) : (myCorrections !== undefined ? [ String(myCorrections) ] : [ ]);\n  let resultMsg = \"\";\n  let solutionMsg = \"\";\n  let alertClass = \"\";\n\n  if (myAnswer === undefined || myAnswer === null) {\n    // No solution, just show the answer\n    resultMsg = \"Answer:\";\n    solutionMsg = mySolution ? mySolution : \"No answer available.\";\n    alertClass = \"usa-alert usa-alert--info\";\n  } else if (responseArr.length > 1 && solutionArr.length === 1) {\n    // User selected multiple answers but only one is correct\n    resultMsg = \"Error\";\n    solutionMsg = \"Please only select one answer\";\n    alertClass = \"usa-alert usa-alert--error\";\n  } else if (responseArr.length > 1 && solutionArr.length > 1) {\n    // Compare arrays (order-insensitive)\n    const sortedResp = [ ...responseArr ].sort();\n    const sortedSol = [ ...solutionArr ].sort();\n    const isMatch = sortedResp.length === sortedSol.length && sortedResp.every((v, i) => v === sortedSol[ i ]);\n    if (isMatch) {\n      resultMsg = \"Success!\";\n      solutionMsg = mySolution ? mySolution : \"\";\n      alertClass = \"usa-alert usa-alert--success\";\n    } else {\n      resultMsg = \"Incorrect\";\n      solutionMsg = \"<p>Please try again</p>\";\n      alertClass = \"usa-alert usa-alert--error\";\n    }\n  } else if (responseArr.length === 1 && solutionArr.length === 1) {\n    // Compare single values\n    if (String(responseArr[ 0 ]) === String(solutionArr[ 0 ])) {\n      resultMsg = \"Success!\";\n      solutionMsg = myCorrections ? correctionArr[ userResponse-1 ] : (mySolution ? mySolution : \"\");\n      alertClass = \"usa-alert usa-alert--success\";\n    } else {\n      resultMsg = \"Incorrect\";\n      solutionMsg = myCorrections ? correctionArr[ userResponse-1 ] : \"<p>Please try again</p>\";\n      alertClass = \"usa-alert usa-alert--error\";\n    }\n  } else {\n    resultMsg = \"Incorrect\";\n    solutionMsg = \"<p>Please try again</p>\";\n    alertClass = \"usa-alert usa-alert--error\";\n  }\n\n  var htmlSolution = solutionMsg ? $.parseHTML( solutionMsg ) : null;\n  var solPrint = solutionMsg ? htmlSolution[ 0 ].data : \" \";\n\n  // Wrap the result in a USWDS Alert\n   const alertHtml = $(\"<div/>\", {\n      \"class\": alertClass + \" margin-2 shadow-3\",\n    }).append($('<div/>',{\n      \"class\": \"usa-alert__body\",\n    }).append($(\"<h4/>\", {\n      \"class\":\"usa-alert__heading\",\n      text:resultMsg,\n    })).append($(\"<div/>\", {\n      \"class\":\"usa-alert__text\",\n    }).html(solPrint))); \n\n    processCodeBlocks(alertHtml);\n\n    displayDiv.html(alertHtml);\n\n  }\n\n// Returns the \"questions\" array from quizdata\nfunction getQuizQuestions() {  \n  const baseURL = window.location.origin;\n  var path = window.location.pathname;\n  $.ajax({\n      type: 'GET',\n      url: baseURL + '/assets/js/quiz/quiz.json',\n      data: { get_param: 'value' },\n      dataType: 'json',\n      success: function (data) {\n        \n        var entry = data.find(q => q.ref === path);\n        var questionsarray = entry ? entry.questions : null;\n        questions = questionsarray;\n      },\n      error: function () {\n        console.log(\"Failed to fetch quiz questions\");\n      },\n  });\n}\n\nfunction quizload(){\n\n  getQuizQuestions();\n  \n  $( \"code.no-copy\" ).wrap(\"<div class='language-plaintext highlighter-rouge'><div class='highlight'><pre class='highlight'></pre></div></div>\");\n  $( \"code.copy\" ).wrap(\"<div class='language-plaintext quiz-copy-code highlighter-rouge'><div class='highlight'><pre class='highlight'></pre></div></div>\");\n  /* $(\"div.quiz-copy-code\").each(function(){\n    codeProcess(this);\n  }); */\n\n  document.querySelectorAll('.sn-quiz').forEach(quiz => {\n    //quiz.addEventListener(\"submit\", () => submitQuiz(quiz));\n    quiz.addEventListener(\"submit\", function (e) {\n      e.preventDefault();\n      submitQuiz(this); \n    });\n  });\n  document.querySelectorAll('.sn-question').forEach(question => {\n    //question.addEventListener(\"submit\", () => submitQuestion(question));\n    question.addEventListener(\"submit\", function (e) {\n      e.preventDefault();\n      submitQuestion(this); \n    });\n  });\n}\n\nmodule.exports = quizload;","const quizload = require(\"./js/quiz\");\n\nconst initQuiz = () => {\n  quizload();\n};\n\nif (document.readyState === \"loading\") {\n  document.addEventListener(\"DOMContentLoaded\", initQuiz, { once: true });\n} else {\n    initQuiz();\n}"]}